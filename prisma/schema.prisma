// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  student Student? @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff   Staff?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  manager Manager? @relation(fields: [userId], references: [id], onDelete: Cascade)
  teacher Teacher? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  student      Student? @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff        Staff?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  manager      Manager? @relation(fields: [userId], references: [id], onDelete: Cascade)
  teacher      Teacher? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  gmail          String         @unique
  password       String
  dob            DateTime
  address        String
  phoneNumber    String
  school         String
  platformKnown  String
  note           String?
  role           String         @default("student")
  createdAt      DateTime       @default(now())
  exams          Exam[]
  registrations  Registration[]
  payments       Payment[]
  accounts       Account[]
  sessions       Session[]
  studentClasses StudentClass[]
  reminders      Reminder[]
  testAssignments TestAssignment[]
}

model Staff {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phoneNumber String
  password    String
  role        String   @default("staff")
  createdAt   DateTime @default(now())
  payments    Payment[]
  accounts    Account[]
  sessions    Session[]
  reminders   Reminder[]
}

model Teacher {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phoneNumber String
  password    String
  role        String   @default("teacher")
  createdAt   DateTime @default(now())
  accounts    Account[]
  sessions    Session[]
  classes     Class[]
  tests       Test[]
}

model Manager {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phoneNumber String
  password    String
  role        String   @default("manager")
  createdAt   DateTime @default(now())
  accounts    Account[]
  sessions    Session[]
}

model Exam {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String   @db.ObjectId
  student        Student  @relation(fields: [studentId], references: [id])
  score          Float
  levelEstimate  String
  examDate       DateTime?
  notes          String?
  createdAt      DateTime @default(now())
}

model Registration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String   @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id])
  levelName   String
  amountPaid  Float
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model LevelThreshold {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     String
  minScore  Float
  maxScore  Float
  createdAt DateTime @default(now())
}

model Class {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  level          String
  maxStudents    Int
  teacherId      String?   @db.ObjectId
  teacher        Teacher?  @relation(fields: [teacherId], references: [id])
  payment_amount Float?
  numSessions    Int       @default(24)    // number of class session at default
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  payments       Payment[]
  studentClasses StudentClass[]
  classroom      Classroom?
  notes          ClassNote[]
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  class_id       String   @db.ObjectId
  class          Class    @relation(fields: [class_id], references: [id], onDelete: Cascade)
  payment_amount Float
  user_id        String   @db.ObjectId
  student        Student  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  datetime       DateTime @default(now())
  payment_method String
  staff_assigned String   @db.ObjectId
  staff          Staff    @relation(fields: [staff_assigned], references: [id])
  have_paid      Boolean  @default(false)
  discount_percentage Float  @default(0)
  discount_reason     String?
  createdAt      DateTime @default(now())
}

// New model for many-to-many relationship
model StudentClass {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  classId   String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  attendance Int     @default(0)
  classRegistered Int @default(0) // Number of classes student is registered for (defaults to class.numSessions)

  @@unique([studentId, classId], name: "studentId_classId")
}

model Reminder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  staffId   String   @db.ObjectId
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  type      String   // "payment" or "examination"
  platform  String   // "call", "email", "sms"
  studentId String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  userRole    String   // "user", "staff", "manager"
  type        String   // "bug", "feature", "complaint", "suggestion", "other"
  title       String
  description String
  screenshot  String?  // URL to uploaded screenshot
  status      String   @default("pending") // "pending", "in_progress", "resolved", "closed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 

// Tracks per-class running session count
model Classroom {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  classId    String  @db.ObjectId
  class      Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classCount Int     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([classId])
}

// Notes per class session
model ClassNote {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  classId       String   @db.ObjectId
  class         Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  sessionNumber Int
  content       String
  createdAt     DateTime @default(now())

  @@unique([classId, sessionNumber])
}

// Test model for creating exams
model Test {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  teacherId       String   @db.ObjectId
  teacher         Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  duration        Int      // Duration in minutes
  totalQuestions  Int
  totalScore      Float    // Maximum possible score
  passingScore    Float    // Minimum score to pass (in percentage)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  questions       Question[]
  assignments     TestAssignment[]
}

// Question model for test questions
model Question {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  testId      String   @db.ObjectId
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionText String
  questionType String  // "mcq", "constructed_response", "fill_blank", "mapping"
  order       Int      // Question order in the test
  score       Float    // Points for this question
  createdAt   DateTime @default(now())
  
  // MCQ options
  options     QuestionOption[]
  
  // Fill in the blank content
  fillBlankContent String?
  
  // Mapping columns
  mappingColumns MappingColumn[]
  
  // Correct answers for MCQ and mapping
  correctAnswers String[] // Array of correct answer IDs or text
  
  // Student answers to this question
  studentAnswers StudentAnswer[]
}

// Question options for MCQ questions
model QuestionOption {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  optionText String
  optionKey  String   // A, B, C, D, E, F
  isCorrect  Boolean  @default(false)
  order      Int
  createdAt  DateTime @default(now())
}

// Mapping columns for mapping questions
model MappingColumn {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  columnType String   // "left" or "right"
  itemText   String
  order      Int
  createdAt  DateTime @default(now())
}

// Test assignment to students
model TestAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  testId    String   @db.ObjectId
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  studentId String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  dueDate   DateTime?
  completedAt DateTime?
  score     Float?
  answers   StudentAnswer[]
  
  @@unique([testId, studentId])
}

// Student answers to questions
model StudentAnswer {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  assignmentId    String   @db.ObjectId
  assignment      TestAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  questionId      String   @db.ObjectId
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerText      String?  // For constructed response and fill in the blank
  selectedOptions String[] // For MCQ - array of selected option IDs
  mappingAnswers  String[] // For mapping - array of paired item IDs
  score           Float?   // Score awarded for this answer
  feedback        String?  // Teacher feedback for constructed response
  answeredAt      DateTime @default(now())
}