// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" (student) or "staff"
  password      String?   // For email/password authentication
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  gmail          String         @unique
  password       String
  dob            DateTime
  address        String
  phoneNumber    String
  school         String
  platformKnown  String
  note           String?
  createdAt      DateTime       @default(now())
  exams          Exam[]
  registrations  Registration[]
}

model Staff {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phoneNumber String
  createdAt   DateTime @default(now())
}

model Exam {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String   @db.ObjectId
  student        Student  @relation(fields: [studentId], references: [id])
  score          Float
  levelEstimate  String
  notes          String?
  createdAt      DateTime @default(now())
}

model Registration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String   @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id])
  levelName   String
  amountPaid  Float
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model LevelThreshold {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     String
  minScore  Float
  maxScore  Float
  createdAt DateTime @default(now())
} 