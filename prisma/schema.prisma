// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  student Student? @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff   Staff?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  student      Student? @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff        Staff?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  gmail          String         @unique
  password       String
  dob            DateTime
  address        String
  phoneNumber    String
  school         String
  platformKnown  String
  note           String?
  role           String         @default("user")
  classId        String?        @db.ObjectId
  class          Class?         @relation(fields: [classId], references: [id])
  createdAt      DateTime       @default(now())
  exams          Exam[]
  registrations  Registration[]
  payments       Payment[]
  accounts       Account[]
  sessions       Session[]
}

model Staff {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phoneNumber String
  password    String
  role        String   @default("staff")
  createdAt   DateTime @default(now())
  payments    Payment[]
  accounts    Account[]
  sessions    Session[]
}

model Exam {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String   @db.ObjectId
  student        Student  @relation(fields: [studentId], references: [id])
  score          Float
  levelEstimate  String
  examDate       DateTime?
  notes          String?
  createdAt      DateTime @default(now())
}

model Registration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String   @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id])
  levelName   String
  amountPaid  Float
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model LevelThreshold {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     String
  minScore  Float
  maxScore  Float
  createdAt DateTime @default(now())
}

model Class {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  level          String
  maxStudents    Int
  teacherName    String?
  payment_amount Float?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  students       Student[]
  payments       Payment[]
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  class_id       String   @db.ObjectId
  class          Class    @relation(fields: [class_id], references: [id], onDelete: Cascade)
  payment_amount Float
  user_id        String   @db.ObjectId
  student        Student  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  datetime       DateTime @default(now())
  payment_method String
  staff_assigned String   @db.ObjectId
  staff          Staff    @relation(fields: [staff_assigned], references: [id])
  have_paid      Boolean  @default(false)
  createdAt      DateTime @default(now())
} 